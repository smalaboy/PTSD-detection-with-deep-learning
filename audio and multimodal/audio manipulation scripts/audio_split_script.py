# -*- coding: utf-8 -*-
"""audio_split_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q-akejZR5f7YJXpD6n64N6CoZhx9MpKF
"""

import librosa
import soundfile
import numpy as np
import math
import os
from sklearn.model_selection import train_test_split

BASE_AUDIOS_PATH = '/raid/home/labusermoctar/ptsd_dataset/final_data/audios'
SPLIT_FILES_DIR = '/raid/home/labusermoctar/ptsd_dataset/final_data/splits'
CHUNK_SIZE = 30*1000  # Number of milliseconds
REPEAT_SHORTS = False
DROP_SHORTS = True

# !rm -r splits/

# !unzip data.zip

# sig, sr = librosa.load('audio1.wav')

# soundfile.read('audio1.wav')[0].shape

# sig[:sig.size//2].shape

# soundfile.write('new_audio1.wav', sig[:sig.size//2], sr)


def split_audio(file_path, chunck_ln=10*1000, drop_shorts=False, repeat_shorts=True, extra_subdir=''):
  '''
  Split audio file into chuncks of size chunck_ln (milliseconds).
  '''
  path_wo_ext = file_path.split('.')
  ext = path_wo_ext[-1]
  path_wo_ext = ''.join(path_wo_ext[:-1])
  path_wo_ext = path_wo_ext.replace(BASE_AUDIOS_PATH, '')
  if path_wo_ext.startswith('.'):
    path_wo_ext = path_wo_ext[1:]
  if path_wo_ext.startswith('/'):
    path_wo_ext = path_wo_ext[1:]
  # name = path_wo_ext.split('/')[-1]
  # print(SPLIT_FILES_DIR, path_wo_ext)
  split_files_path = os.path.join(SPLIT_FILES_DIR, extra_subdir, path_wo_ext)
  os.makedirs(split_files_path, exist_ok=True)
  # print(split_files_path)
  c = 0
  try:
    f = soundfile.SoundFile(file_path)
  except RuntimeError:
    return 0
  sig = f.read()
  sr = f.samplerate
  
  n_frames = f.frames
  duration = n_frames/sr
  sig_len = sig.shape[0]
  max_len = sr//1000 * chunck_ln
  # print(n_frames, sr, duration, max_len, f.mode)

  max_chunks = sig_len//max_len if drop_shorts else math.ceil(sig_len/max_len)
  for i in range(max_chunks):
    cut_sig = sig[i*max_len : min((i+1)*max_len, sig_len)]
    # print("i", i)
    if repeat_shorts and cut_sig.size  < max_len:
      # print("in")
      while cut_sig.size % max_len != 0:
        min_cut = min(cut_sig.size, max_len-cut_sig.size)
        # print("min_cut=",min_cut)
        missing = cut_sig[:min(cut_sig.size, max_len-cut_sig.size)]
        cut_sig = np.concatenate((cut_sig, missing))
        # print(missing.shape, cut_sig.shape)
    write_path = os.path.join(split_files_path, f"s{c}.{ext}")
    print(write_path)
    soundfile.write(write_path, cut_sig, samplerate=sr)
    c += 1
  # print("c=", c)

  return c

# split_audio('audio2.wav', chunck_ln=30*1000)

def list_files_rec(path):
  '''
  List all files in path (dirs excluded)
  '''
  files = os.listdir(path)
  files = [os.path.abspath(os.path.join(path, f)) for f in files]
  dirs = [f for f in files if os.path.isdir(f)]
  if not dirs:
    return files
  files = list(set(files) - set(dirs))
  for dir in dirs:
    files += list_files_rec(dir)
  return files


def split_all_audios_from_list(paths_list=[], chunck_ln=1*60*1000, repeat_shorts=True, drop_shorts=False, extra_subdir=''):
  '''
  Split all audio files in list
  '''
  for i, path in enumerate(paths_list):
      n_splits = split_audio(path, chunck_ln, repeat_shorts=repeat_shorts, drop_shorts=drop_shorts, extra_subdir=extra_subdir)
      print(f"File: {path} - {n_splits} parts")
      print("-"*50)
      
      
no_audios = list_files_rec(os.path.join(BASE_AUDIOS_PATH, 'no'))
yes_audios = list_files_rec(os.path.join(BASE_AUDIOS_PATH, 'yes'))   

print("No vs Yes", len(no_audios), len(yes_audios))   

yes_train, yes_test, _, _ = train_test_split(yes_audios, [1]*len(yes_audios), shuffle=True, test_size=0.30, random_state=42)
yes_test, yes_val, _, _ = train_test_split(yes_test, [1]*len(yes_test), shuffle=True, test_size=0.5, random_state=42)

np.random.shuffle(no_audios)
no_audios = no_audios[:len(yes_audios)]

print("New size of NO", len(no_audios))

no_train, no_test, _, _ = train_test_split(no_audios, [0]*len(no_audios), shuffle=True, test_size=0.30, random_state=42)
no_test, no_val, _, _ = train_test_split(no_test, [0]*len(no_test), shuffle=True, test_size=0.5, random_state=42)

print("Yes ", len(yes_train), len(yes_test))
print("No", len(no_train), len(no_test))

split_all_audios_from_list(yes_train, chunck_ln = CHUNK_SIZE, drop_shorts=DROP_SHORTS, repeat_shorts=REPEAT_SHORTS, extra_subdir='train')
split_all_audios_from_list(yes_test, chunck_ln = CHUNK_SIZE, drop_shorts=DROP_SHORTS, repeat_shorts=REPEAT_SHORTS, extra_subdir='test')
split_all_audios_from_list(yes_val, chunck_ln = CHUNK_SIZE, drop_shorts=DROP_SHORTS, repeat_shorts=REPEAT_SHORTS, extra_subdir='val')
split_all_audios_from_list(no_train, chunck_ln = CHUNK_SIZE, drop_shorts=DROP_SHORTS, repeat_shorts=REPEAT_SHORTS, extra_subdir='train')
split_all_audios_from_list(no_test, chunck_ln = CHUNK_SIZE, drop_shorts=DROP_SHORTS, repeat_shorts=REPEAT_SHORTS, extra_subdir='test')
split_all_audios_from_list(no_val, chunck_ln = CHUNK_SIZE, drop_shorts=DROP_SHORTS, repeat_shorts=REPEAT_SHORTS, extra_subdir='val')

print("DONE")
